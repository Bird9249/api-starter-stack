openapi: 3.0.3
info:
  title: Starter 
  version: 1.0.0
servers:
  - url: http://localhost:3000
tags:
  - name: authentication
    description: Operations about Authentication
  - name: users
    description: Represents resources related to users.
  - name: roles
    description: Operations about Role
  - name: permissions
    description: Operations about Permission
 
paths:
  /auth/login:
    post: 
      tags:
        - authentication
      summary: Login to your account
      operationId: login
      requestBody: 
        description: Login to your account
        content:
          application/json:
            schema:
              required:
                - email
                - password
              type: object
              properties:
                email:
                  type: string
                  example: lkp95680383@gmail.com
                password:
                  type: string
                  example: Bird9249
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  user: 
                    allOf:
                      - $ref: '#/components/schemas/User'
                      - type: object
                        properties:
                          profile:
                            $ref: '#/components/schemas/Profile'
                  permissions:
                    type: array
                    items: 
                      type: string
        '400':
          description: Validation Faild
        '401':
          description: Invalid Information
  /auth/me:
    get:
      tags: 
        - authentication
      summary: Get your information
      operationId: getMe
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - type: object
                    properties:
                      profile:
                        $ref: '#/components/schemas/Profile'
                      roles: 
                        type: array
                        items: 
                          $ref: '#/components/schemas/Role'
                      permissions: 
                        type: array
                        items: 
                          type: string
                      session: 
                        $ref: '#/components/schemas/Session'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /auth/refresh-token:
    post:
      tags: 
       - authentication
      summary: Refresh token
      operationId: refreshToken
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  /auth/logout:
    post:
      tags: 
        - authentication
      summary: Logout from your account
      operationId: logout
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /users:
    post:
      tags: 
        - users
      summary: Create a new user
      description: Endpoint for creating a new user in the system.
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/UserInput'
      responses:
        '200':
          $ref: '#/components/responses/SuccessOperation'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      security:
        - bearerAuth: []

  /roles:
    get:
      tags:
        - roles
      summary: Get all Role
      operationId: getRoles
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items: 
                          $ref: '#/components/schemas/Role' 
                      total:
                        type: number
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      security:
        - bearerAuth: []
    post: 
      tags:
        - roles
      summary: Create Role
      operationId: createRole
      requestBody:
        $ref: '#/components/requestBodies/RoleInput'
      responses:
        '200':
          $ref: '#/components/responses/SuccessOperation'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      security:
        - bearerAuth: []
  /roles/{id}:
    get:
      tags: 
        - roles
      summary: Get role by id
      operationId: getRoleById
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Role'
                  - type: object
                    properties:
                      permissions:
                        type: array
                        items: 
                          $ref: '#/components/schemas/Permission'
                      users:
                        type: array
                        items: 
                          $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
    put:
      tags: 
        - roles
      summary: Update role by id
      operationId: updateRole
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        $ref: '#/components/requestBodies/RoleInput'
      responses:
        '200':
          $ref: '#/components/responses/SuccessOperation'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - bearerAuth: []
    delete:
      tags: 
        - roles
      summary: Delete role by id
      operationId: deleteRole
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          $ref: '#/components/responses/SuccessOperation'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
      security:
        - bearerAuth: []

  /permissions:
    get: 
      tags:
        - permission
      summary: Get permission
      description: Get all permissions
      operationId: get_permission
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: string
                  $ref: '#/components/schemas/Permission'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      security:
        - bearerAuth: []
  
components:
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT    

  requestBodies:
    UserInput:
       content:
        multipart/form-data:
          schema: 
            type: object
            properties:
              first_name:
                type: string
                minLength: 3
                maxLength: 255
              last_name:
                type: string
                minLength: 3
                maxLength: 255
              image: 
                type: string
                format: binary
              email: 
                type: string
                maxLength: 255
              password: 
                type: string
                minLength: 8
                maxLength: 255
              role_ids:
                type: string
            required:
              - "first_name"
              - "last_name"
              - "image"
              - "email"
              - "password"
              - "role_ids"

          
              
    RoleInput: 
      content:
        application/json:
          schema: 
            type: object
            properties:
              name:
                type: string
                minLength: 3
                maxLength: 255
              description:
                type: string
              permission_ids:
                type: array
                items:
                  type: number
            required:
              - name
              - permission_ids

  parameters:
    idParam:      
      name: id
      in: path
      description: Id for get item
      required: true
      schema:
        type: string

    offsetParam:      
      name: offset
      in: query
      description: Number of items to skip before returning the results.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0

    limitParam:      
      name: limit
      in: query
      description: Maximum number of items to return.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 10

  responses:
    SuccessOperation: 
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

    ConflictError:
      description: Indicates that there was a conflict with the current state of the resource.
      content:
        application/json:
          schema:
           type: object
           properties:
            message: 
              type: string

    NotFoundError:
      description: The requested resource was not found.
      content:
        application/json:
          schema:
           type: object
           properties:
            message: 
              type: string

    ForbiddenError:
      description: Access denied You do not have permission to access this resource.
      content:
        application/json:
          schema:
           type: object
           properties:
            message: 
              type: string

    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema: 
            type: object
            properties:
              message: 
                type: string
              code:
                type: string
                enum:
                  - MISSING_TOKEN
                  - INVALID_TOKEN_FORMAT
                  - INVALID_TOKEN
                  - TOKEN_EXPIRED
            required:
              - message
      
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
        created_at:
          type: string
        updated_at:
          type: string

    Session:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
          format: date-time
      required:
        - id
        - user
        - created_at
    
    Profile:
      type: object
      properties:
        id:
          type: integer
          format: int64
        first_name:
          type: string
        last_name:
          type: string
        image:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - first_name
        - last_name
        - image
        - created_at
        - updated_at

    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - created_at
        - updated_at

    PermissionGroup:
      type: string
      enum:
        - user

    Permission:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        group_name:
          $ref: '#/components/schemas/PermissionGroup'
        description:
          type: string
        created_at:
          type: string
          format: date-time
      required:
          - id
          - name
          - group_name
          - created_at
